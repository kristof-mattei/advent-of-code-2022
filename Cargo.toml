[package]
name = "advent-of-code-2022"
# don't change this, it's updated before an actual build by update-version.sh
version = "0.0.0-development"
edition = "2024"
rust-version = "1.88.0"
authors = ["Kristof Mattei"]
description = "Advent of Code 2022"
license-file = "LICENSE"
categories = ["playground"]
keywords = ["playground"]
repository = "https://github.com/kristof-mattei/advent-of-code-2022"

[lints.clippy]
# don't stop from compiling / running
all = "warn"
cargo = "warn"
complexity = "warn"
correctness = "warn"
pedantic = "warn"
perf = "warn"
# restriction = "warn"
style = "warn"
suspicious = "warn"

# this has 0 performance implications, the binding is compiled away, and it could cause issues
# when done blindly, plus it makes it harder to debug as you cannot put breakpoints on return
# values of functions (yet)
let_and_return = { level = "allow", priority = 127 }
# nothing we can do about multiple crate versions, so this lint just creates noise
multiple_crate_versions = { level = "allow", priority = 127 }
# this one is debatable. continue is used in places to be explicit, and to guard against
# issues when refactoring
needless_continue = { level = "allow", priority = 127 }
# this one causes confusion when combining variables (`foo`) and
# dereferenced variables (`foo.bar`). The latter cannot be inlined
# so we don't inline anything
uninlined-format-args = { level = "allow", priority = 127 }

[lints.rust]
let_underscore_drop = { level = "deny", priority = 127 }
non_ascii_idents = { level = "deny", priority = 127 }

[dependencies]
color-eyre = "0.6.5"
enum-map = "2.7.3"
hashbrown = { version = "0.15.4", default-features = false, features = [
    "default-hasher",
    "inline-more",
    "equivalent",
] }
regex = { version = "1.11.1", default-features = false, features = [
    "perf",
    "unicode-perl", # for \d \s \w
    "std",
] }
